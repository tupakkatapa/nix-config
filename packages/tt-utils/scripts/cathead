#!/usr/bin/env bash
set -o pipefail
trap 'exit 0' SIGINT

search_path=()
pattern=""
exclude_patterns=()

# Display usage information
display_usage() {
  cat <<USAGE
Usage: cathead [OPTIONS...] [FILES...]

Description:
  Display the contents of multiple files with headers.

Arguments:
  FILES
    One or more files to display.

Options:
  -r, --recursive         Recursively search for files.
  -p, --pattern PATTERN   Filter files by pattern (e.g., "*.nix")
  -e, --exclude PATTERN   Exclude files matching pattern (e.g., "*.bak")
  -h, --help              Show this help message
USAGE
}

# Check if a file should be excluded
should_exclude() {
  local file="$1"
  local basename

  basename=$(basename "$file")

  if [[ ${#exclude_patterns[@]} -gt 0 ]]; then
    for pattern in "${exclude_patterns[@]}"; do
      # First try matching the full path
      if [[ "$file" == "$pattern" ]]; then
        return 0  # Yes, exclude this file
      fi

      # Then try matching just the basename
      if [[ "$basename" == "$pattern" ]]; then
        return 0  # Yes, exclude this file
      fi
    done
  fi

  return 1  # No, don't exclude this file
}

# Print file contents with headers
print_file() {
  local file="$1"

  # Skip if file matches exclude pattern
  if should_exclude "$file"; then
    return
  fi

  GREEN='\033[0;32m'
  RESET='\033[0m'
  echo -e "${GREEN}==> $file <==${RESET}"
  cat "$file"
  echo # newline
}

# Main function
main() {
  local recursive=false

  while [[ $# -gt 0 ]]; do
    case $1 in
    -r | --recursive)
      recursive=true
      shift
      ;;
    -p | --pattern)
      pattern="$2"
      shift 2
      ;;
    -e | --exclude)
      exclude_patterns+=("$2")
      shift 2
      ;;
    -h | --help)
      display_usage
      exit 0
      ;;
    *)
      search_path+=("$1")
      shift
      ;;
    esac
  done

  if [[ "${#search_path[@]}" -eq 0 ]]; then
    search_path=(".")
  fi

  if [[ "$recursive" = true ]]; then
    if [[ -n "$pattern" ]]; then
      # Use find with -name to filter by pattern
      find "${search_path[@]}" -type f -name "$pattern" -print0 | sort -z | while IFS= read -r -d '' file; do
        print_file "$file"
      done
    else
      # If we have *.nix style args in search_path, handle them specially
      for path in "${search_path[@]}"; do
        if [[ "$path" == *\** ]]; then
          # This is a pattern, extract the directory and filename pattern
          dir_part=$(dirname "$path")
          file_pattern=$(basename "$path")

          # If dir_part is just ".", use it directly
          if [[ "$dir_part" == "." ]]; then
            find . -type f -name "$file_pattern" -print0 | sort -z | while IFS= read -r -d '' file; do
              print_file "$file"
            done
          else
            # Otherwise, search in the specified directory
            find "$dir_part" -type f -name "$file_pattern" -print0 | sort -z | while IFS= read -r -d '' file; do
              print_file "$file"
            done
          fi
        else
          # Regular path, search all files recursively
          find "$path" -type f -print0 | sort -z | while IFS= read -r -d '' file; do
            print_file "$file"
          done
        fi
      done
    fi
  else
    # Non-recursive mode - expand any glob patterns
    for path in "${search_path[@]}"; do
      # Check if this is a direct file
      if [[ -f "$path" ]]; then
        print_file "$path"
      # Check if this is a glob pattern
      elif [[ "$path" == *\** ]]; then
        # Expand the glob
        for file in $path; do
          if [[ -f "$file" ]]; then
            print_file "$file"
          fi
        done
      fi
    done
  fi
}

main "$@"
