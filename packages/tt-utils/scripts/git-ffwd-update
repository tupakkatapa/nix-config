#!/usr/bin/env bash

set -o pipefail
trap 'exit 0' SIGINT

remotes=""

# Display usage information
display_usage() {
  cat <<USAGE
Usage: git-ffwd-update [REMOTE...]

Description:
  Fast-forward update the current branch with the specified remote branches.

Arguments:
  REMOTE
    One or more Git remote names.

Options:
  -h, --help
    Show this help message

Examples:
  git-ffwd-update origin

USAGE
}

# Parse and validate command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      display_usage
      exit 0
      ;;
    *)
      remotes+="$1 "
      shift
      ;;
    esac
  done
}

# Main function
main() {
  parse_arguments "$@"

  [ -z "$remotes" ] && remotes=$(git remote)

  for remote in $remotes; do
    git remote update "$remote"
    git remote show "$remote" -n | awk '/merges with remote/{print $5" "$1}' | while read -r rb lb; do
      arb="refs/remotes/$remote/$rb"
      alb="refs/heads/$lb"
      nbehind=$(( $(git rev-list --count $alb..$arb 2>/dev/null) +0 ))
      nahead=$(( $(git rev-list --count $arb..$alb 2>/dev/null) +0 ))
      if [ "$nbehind" -gt 0 ]; then
        if [ "$nahead" -gt 0 ]; then
          echo "Branch $lb is $nbehind commits behind and $nahead commits ahead of $remote/$rb. Cannot fast-forward."
        elif [ "$lb" = "$(git rev-parse --abbrev-ref HEAD)" ]; then
          echo "Fast-forward merging $lb."
          git merge -q "$arb"
        else
          echo "Resetting branch $lb to $remote/$rb."
          git branch -f "$lb" -t "$arb" >/dev/null
        fi
      fi
    done
  done
}

main "$@"
